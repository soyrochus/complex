name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Apache AGE
      run: |
        # Download and install Apache AGE
        sudo apt-get install -y wget build-essential postgresql-server-dev-15
        wget https://github.com/apache/age/archive/refs/tags/PG15/v1.3.0.tar.gz
        tar -xzf v1.3.0.tar.gz
        cd age-PG15-v1.3.0
        make PG_CONFIG=/usr/bin/pg_config
        sudo make install PG_CONFIG=/usr/bin/pg_config
    
    - name: Setup AGE extension
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Create AGE extension
        PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS age;"
        PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "LOAD 'age';"
        PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SET search_path = ag_catalog, '\$user', public;"
      env:
        PGPASSWORD: postgres
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run linting
      run: |
        ruff check complex/
        ruff format --check complex/
    
    - name: Run type checking
      run: |
        mypy complex/
    
    - name: Run tests
      run: |
        pytest --cov=complex --cov-report=xml --cov-report=term-missing
      env:
        COMPLEX_DB_HOST: localhost
        COMPLEX_DB_PORT: 5432
        COMPLEX_DB_NAME: postgres
        COMPLEX_DB_USER: postgres
        COMPLEX_DB_PASSWORD: postgres
        COMPLEX_GRAPH_NAME: test_complex_ci
        EDGE_REFERENCES: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Apache AGE
      run: |
        sudo apt-get install -y wget build-essential postgresql-server-dev-15
        wget https://github.com/apache/age/archive/refs/tags/PG15/v1.3.0.tar.gz
        tar -xzf v1.3.0.tar.gz
        cd age-PG15-v1.3.0
        make PG_CONFIG=/usr/bin/pg_config
        sudo make install PG_CONFIG=/usr/bin/pg_config
    
    - name: Setup AGE extension
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS age;"
        PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "LOAD 'age';"
        PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SET search_path = ag_catalog, '\$user', public;"
      env:
        PGPASSWORD: postgres
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test CLI integration
      run: |
        # Create test DSL files
        echo 'ENTITY TestEntity { name: STRING, value: INT };' > test_schema.dsl
        echo 'INSERT TestEntity { name = "test", value = 42 };' > test_data.dsl
        echo 'MATCH (t:TestEntity) RETURN t.name, t.value;' > test_query.dsl
        
        # Test CLI commands
        python -m complex.cli run test_schema.dsl
        python -m complex.cli run test_data.dsl
        python -m complex.cli run test_query.dsl
      env:
        COMPLEX_DB_HOST: localhost
        COMPLEX_DB_PORT: 5432
        COMPLEX_DB_NAME: postgres
        COMPLEX_DB_USER: postgres
        COMPLEX_DB_PASSWORD: postgres
        COMPLEX_GRAPH_NAME: integration_test_graph
        TEST_CLI_INTEGRATION: 1

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
